library(parallel)
library(purrr)
library(kableExtra)
library(factoextra)
library(cluster)
library(DT)
library(caret)
library(Hmisc)
library(corrplot)
genesentrada <- fread("entradageneset.txt", header = F)
knitr::opts_chunk$set(echo = TRUE , warning= FALSE, message=FALSE, fig.width=12, fig.height=8)
library(dplyr)
library(clusterProfiler)
library(readr)
library(data.table)
library(HistogramTools)
library(ggplot2)
library(reshape2)
library(stats)
library(plotly)
library(devtools)
library(PhenoExamWeb)
library(parallel)
library(purrr)
library(kableExtra)
library(factoextra)
library(cluster)
library(DT)
library(caret)
library(Hmisc)
library(corrplot)
genesentrada <- fread("entradageneset.txt", header = F)
# Estos deben entrar en forma de vector
genesentrada <- genesentrada$V1
genes=genesentrada
organism = "human"
database = "HPO"
p.value = 0.05
nulltestnumber = 100
seed = 1
mensaje <- convertgenesymbolmessage(genes)
mensaje
ejemplogenes <- PhenoEnrichGenes(genes= genesentrada, database = "ALL", plotn = 25)
dfall <- ejemplogenes$alldata
View(dfall)
numportertotal <- fread(paste0(path.package("PhenoExamWeb",
quiet = FALSE), "/hpodatatotales.csv"), header = T)
panel <- PhenoGeneNumber(genes, database = "HPO",
organism)
View(numportertotal)
panel <- PhenoGeneNumber(genes, database = "HPO",
organism)
View(panel)
genes <- as.data.frame(genes)
names(genes) <- "Symbol"
library(clusterProfiler)
names(genes) <- "Symbol"
genes.df <- bitr(genes$Symbol, fromType = "SYMBOL",
toType = c("SYMBOL", "ENTREZID"), OrgDb = "org.Hs.eg.db")
# PhenoExamWeb
require(dplyr)
require(data.table)
library(tidyr)
library(shinymanager)
#####################################
library(flexdashboard)
library(ggplot2)
library(DT)
library(shinyWidgets)
library(dplyr)
library(shiny)
library(clusterProfiler)
library(shinyTree)
library(shinyCheckboxTree)
library(data.table)
library(flextable)
# lectura de los datos
library(readr)
library(PhenoExamWeb)
library(plotly)
library(shinyTree)
library(htmlwidgets)
library(jsonlite)
library(stringr)
library(promises)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
genes.df <- bitr(genes$Symbol, fromType = "SYMBOL",
toType = c("SYMBOL", "ENTREZID"), OrgDb = "org.Hs.eg.db")
genes <- as.data.frame(genes)
names(genes) <- "Symbol"
genes.df <- bitr(genes$Symbol, fromType = "SYMBOL",
toType = c("SYMBOL", "ENTREZID"), OrgDb = "org.Hs.eg.db")
View(genes.df)
remove.packages("clusterProfiler")
install.packages("clusterProfiler")
install.packages("clusterProfiler")
install.packages("clusterProfiler")
BiocManager::install("clusterProfiler")
library(clusterProfiler)
genes <- as.data.frame(genes)
names(genes) <- "Symbol"
genes.df <- bitr(genes$Symbol, fromType = "SYMBOL",
toType = c("SYMBOL", "ENTREZID"), OrgDb = "org.Hs.eg.db")
View(genes.df)
remove.packages("clusterProfiler")
library(devtools)
source("https://bioconductor.org/biocLite.R")
columns(org.Hs.eg.db)
BiocManager::install("AnnotationsDbi")
install.packages("tidyverse")
install.packages(c("codetools", "KernSmooth", "nlme"))
# PhenoExamWeb
require(dplyr)
require(data.table)
library(tidyr)
library(shinymanager)
#####################################
library(flexdashboard)
library(ggplot2)
library(DT)
library(shinyWidgets)
library(dplyr)
library(shiny)
library(shinyTree)
library(shinyCheckboxTree)
library(data.table)
library(flextable)
# lectura de los datos
library(readr)
library(PhenoExamWeb)
library(devtools)
install_github("alexcis95/PhenoExamWeb")
install_github("alexcis95/PhenoExamWeb", force = TRUE)
# PhenoExamWeb
require(dplyr)
require(data.table)
library(tidyr)
library(shinymanager)
#####################################
library(flexdashboard)
library(ggplot2)
library(DT)
library(shinyWidgets)
library(dplyr)
library(shiny)
library(shinyTree)
library(shinyCheckboxTree)
library(data.table)
library(flextable)
# lectura de los datos
library(readr)
library(PhenoExamWeb)
# PhenoExamWeb
require(dplyr)
require(data.table)
library(tidyr)
library(shinymanager)
#####################################
library(flexdashboard)
library(ggplot2)
library(DT)
library(shinyWidgets)
library(dplyr)
library(shiny)
library(shinyTree)
library(shinyCheckboxTree)
library(data.table)
library(flextable)
# lectura de los datos
library(readr)
#library(PhenoExamWeb)
library(plotly)
library(shinyTree)
library(htmlwidgets)
library(jsonlite)
library(stringr)
library(promises)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("alexcis95/PhenoExamWeb")
install_github("alexcis95/PhenoExamWeb", force = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
library(devtools)
install_github("alexcis95/PhenoExamWeb")
install_github("alexcis95/PhenoExamWeb", force = TRUE)
# PhenoExamWeb
require(dplyr)
require(data.table)
library(tidyr)
library(shinymanager)
#####################################
library(flexdashboard)
library(ggplot2)
library(DT)
library(shinyWidgets)
library(dplyr)
library(shiny)
library(shinyTree)
library(shinyCheckboxTree)
library(data.table)
library(flextable)
# lectura de los datos
library(readr)
library(PhenoExamWeb)
library(plotly)
library(shinyTree)
library(htmlwidgets)
library(jsonlite)
library(stringr)
library(promises)
update.packages(ask = FALSE)
update.packages(ask = FALSE)
update.packages()
library(devtools)
install_github("alexcis95/PhenoExamWeb")
# PhenoExamWeb
require(dplyr)
require(data.table)
library(tidyr)
library(shinymanager)
#####################################
library(flexdashboard)
library(ggplot2)
library(DT)
library(shinyWidgets)
library(dplyr)
library(shiny)
library(shinyTree)
library(shinyCheckboxTree)
library(data.table)
library(flextable)
# lectura de los datos
library(readr)
library(PhenoExamWeb)
library(plotly)
library(shinyTree)
library(htmlwidgets)
library(jsonlite)
library(stringr)
library(promises)
install.packages("kableExtra")
library(kableExtra)
# PhenoExamWeb
require(dplyr)
require(data.table)
library(tidyr)
library(shinymanager)
#####################################
library(flexdashboard)
library(ggplot2)
library(DT)
library(shinyWidgets)
library(dplyr)
library(shiny)
library(shinyTree)
library(shinyCheckboxTree)
library(data.table)
library(flextable)
# lectura de los datos
library(readr)
library(PhenoExamWeb)
library(plotly)
library(shinyTree)
library(htmlwidgets)
library(kableExtra)
library(jsonlite)
library(stringr)
library(promises)
install.packages("shinyBS")
library(devtools)
install_github("alexcis95/PhenoExamWeb")
library(PhenoExamWeb)
.libPaths( c( "/home_2/gsit/RLibrary", .libPaths()) )
setwd("~/Escritorio/PhenoExamWeb/R")
document()
library(devtools)
document()
knitr::opts_chunk$set(echo = TRUE , warning= FALSE, message=FALSE, fig.width=12, fig.height=8)
library(CoExpNets)
library(G2PML)
library(dplyr)
library(clusterProfiler)
library(readr)
library(data.table)
library(HistogramTools)
library(ggplot2)
library(reshape2)
library(stats)
library(plotly)
library(devtools)
library(PhenoExamWeb)
library(parallel)
library(purrr)
library(knitr)
library(factoextra)
library(cluster)
library(DT)
library(caret)
library(Hmisc)
library(corrplot)
library(kableExtra)
library(pheatmap)
library(heatmaply)
library(reactable)
# Get the panels
paneles <- getPanelsFromPanelApp()
# Get PD panel
parkinsonpanel<- getPanelFromPanelApp(disorder = "Neurology and neurodevelopmental disorders" , panel = "Parkinson Disease and Complex Parkinsonism")
parkinsonpanelf <- filter(parkinsonpanel, parkinsonpanel$LevelOfConfidence == "HighEvidence")
# Get PD high evidence genes
parkinsongenes <- parkinsonpanelf$GeneSymbol
# Get dystonia panel
dystonia <- getPanelFromPanelApp(disorder = "Neurology and neurodevelopmental disorders" , panel = "Early onset dystonia")
dystoniapanel <- filter(dystonia, dystonia$LevelOfConfidence == "HighEvidence")
# Ges dystonia genes
dystoniagenes <- dystoniapanel$GeneSymbol
knitr::opts_chunk$set(echo = TRUE , warning= FALSE, message=FALSE, fig.width=12, fig.height=8)
library(CoExpNets)
library(G2PML)
library(dplyr)
library(clusterProfiler)
library(readr)
library(data.table)
library(HistogramTools)
library(ggplot2)
library(reshape2)
library(stats)
library(plotly)
library(devtools)
library(PhenoExamWeb)
library(parallel)
library(purrr)
library(kableExtra)
library(factoextra)
library(cluster)
library(DT)
library(caret)
library(Hmisc)
library(corrplot)
genesentrada <- fread("entradageneset.txt", header = F)
# Estos deben entrar en forma de vector
genesentrada <- genesentrada$V1
epileppheno <- QueryGenes(genesentrada,"ALL")
renove.packages("PhenoExamWeb")
remove.packages("PhenoExamWeb")
knitr::opts_chunk$set(echo = TRUE , warning= FALSE, message=FALSE, fig.width=12, fig.height=8)
library(CoExpNets)
library(G2PML)
library(dplyr)
library(clusterProfiler)
library(readr)
library(data.table)
library(HistogramTools)
library(ggplot2)
library(reshape2)
library(stats)
library(plotly)
library(devtools)
#library(PhenoExamWeb)
library(parallel)
library(purrr)
library(kableExtra)
library(factoextra)
library(cluster)
library(DT)
library(caret)
library(Hmisc)
library(corrplot)
install_github("https://github.com/alexcis95/PhenoExamWeb")
knitr::opts_chunk$set(echo = TRUE , warning= FALSE, message=FALSE, fig.width=12, fig.height=8)
library(CoExpNets)
library(G2PML)
library(dplyr)
library(clusterProfiler)
library(readr)
library(data.table)
library(HistogramTools)
library(ggplot2)
library(reshape2)
library(stats)
library(plotly)
library(devtools)
library(PhenoExamWeb)
library(parallel)
library(purrr)
library(kableExtra)
library(factoextra)
library(cluster)
library(DT)
library(caret)
library(Hmisc)
library(corrplot)
genesentrada <- fread("entradageneset.txt", header = F)
# Estos deben entrar en forma de vector
genesentrada <- genesentrada$V1
epileppheno <- QueryGenes(genesentrada,"ALL")
# 5271 terminos
phenonumberepi <- unique(epileppheno$term_id)
allgenes <- fread(paste0(path.package("PhenoExamWeb", quiet = FALSE),
"/geneproteinlist.txt"))
allgenes <- as.data.frame(allgenes)
names(allgenes) <- c("symbol","entrez")
allgenes <- allgenes$symbol
# Esta es con los genes y términos que ya están en el panel
allgepheno <- QueryGenes(allgenes,"ALL")
genestotales <- unique(allgepheno$entrez)
fenostotales <- unique(allgepheno$term_id)
# 461779 posibilidades combinaciones de todos los genes
# número de genes totales en ALL 18939
# numero de fenotipos totales 18128
# COmpruebo para cada gen su fenotipo en realidad hago un test para cada uno de los fenotipos detectados en la muestra y la combinación de genes en ellos
# Cuantas hipotesis estoy probando en una distribución hipergeometrica. Estoy probando cada fenotipo si es significativo o no, es decir número de fenotipos?
#
# Monto la base de datos sin los genes
basesdedatoswithout <- anti_join(allgepheno, epileppheno, by = "term_id")
# Leer todos los archivos con un patron
filenames <- list.files(path="simulated/de1a100/",
pattern="*simu")
# Cargar todos los archivos y asignarlo a un nombre de variable igual
for(nom in filenames){
filepath <- file.path(paste0("simulated/de1a100/",nom,""))
assign(nom, fread(filepath))
}
# Le cambio el nombre para que cada una de ellas identifique un dataset
for(nom in filenames){
filepath <- file.path(paste0("simulated/de1a100/",nom,""))
dnombred <- fread(filepath)
names(dnombred) <- nom
write_csv(dnombred,paste0("simulated/de1a100/",nom,""))
}
combined_files <- do.call("cbind", lapply(paste0("simulated/de1a100/",filenames,""), fread))
data<- melt(combined_files)
dise3 <- ggplot(data,aes(x=value, fill=variable)) + geom_density(alpha=0.75) + ggtitle("POR from simulated epilepsy disorders") +
xlab("POR") + ylab("Density")+ scale_fill_discrete(name = "Gene sets")
ggplot(data = data, aes(x=variable, y=value)) + geom_boxplot(aes())
dise3
# Leer todos los archivos con un patron
filenames <- list.files(path="simulated/de1a100/",
pattern="*simu")
# Cargar todos los archivos y asignarlo a un nombre de variable igual
for(nom in filenames){
filepath <- file.path(paste0("simulated/de1a100/",nom,""))
assign(nom, fread(filepath))
}
# Le cambio el nombre para que cada una de ellas identifique un dataset
for(nom in filenames){
filepath <- file.path(paste0("simulated/de1a100/",nom,""))
dnombred <- fread(filepath)
names(dnombred) <- nom
write_csv(dnombred,paste0("simulated/de1a100/",nom,""))
}
combined_files <- do.call("cbind", lapply(paste0("simulated/de1a100/",filenames,""), fread))
data<- melt(combined_files)
View(data)
data70 <- filter(data, data$value > 0.7)
dise3 <- ggplot(data70,aes(x=value, fill=variable)) + geom_density(alpha=0.75) + ggtitle("POR from simulated epilepsy disorders") +
xlab("POR") + ylab("Density")+ scale_fill_discrete(name = "Gene sets")
dise3
data70 <- filter(data, data$value > 0.87)
dise3 <- ggplot(data70,aes(x=value, fill=variable)) + geom_density(alpha=0.75) + ggtitle("POR from simulated epilepsy disorders") +
xlab("POR") + ylab("Density")+ scale_fill_discrete(name = "Gene sets")
dise3
data70 <- filter(data, data$value > 0.89)
dise3 <- ggplot(data70,aes(x=value, fill=variable)) + geom_density(alpha=0.75) + ggtitle("POR from simulated epilepsy disorders") +
xlab("POR") + ylab("Density")+ scale_fill_discrete(name = "Gene sets")
dise3
dise3 <- ggplot(data70,aes(x=value, fill=variable)) + geom_density(alpha=0.75) + ggtitle("POR from simulated epilepsy disorders") +
xlab("POR") + ylab("Density")+ scale_fill_discrete(name = "Gene sets")
ggplot(data = data, aes(x=variable, y=value)) + geom_boxplot(aes())
ggplot(data = data, aes(x=variable, y=value)) + geom_boxplot(aes())
ggplot(data = data, aes(x=variable, y=value)) + geom_boxplot(aes())
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(mlbench)
library(pROC)
library(doParallel)
n.cores <- detectCores()
mnist.train <- read.csv("mnist_train.csv",
header = FALSE)
mnist.train <- read.csv("mnist_train.csv",
header = FALSE)
mnist.test <- read.csv("mnist_test.csv",
header = FALSE)
colnames(mnist.train) <- c("Numero", paste0("X",1:784))
colnames(mnist.test) <- c("Numero", paste0("X",1:784))
View(mnist.train)
# Quitamos las columnas con todo 0s
mnist.train.x <- mnist.train[,-1]
View(mnist.train.x)
mnist.train.pre.proc <- mnist.train.x[,colSums(mnist.train.x != 0) > 0]
variables.usadas <- colnames(mnist.train.pre.proc)
pca <- readRDS("pca.rds")
PVE <- pca$sdev ^ 2 / sum(pca$sdev ^ 2)
which(cumsum(PVE) > 0.85)[1]
cumsum(PVE)[59]
ggplot(data = data, aes(x=variable, y=value)) + geom_boxplot(aes())
ggplot(data = data, aes(x=variable, y=value)) + geom_boxplot(aes())
ggplot(data = data, aes(x=variable, y=value)) + geom_boxplot(aes())
ggplot(data = data, aes(x=variable, y=value)) + geom_boxplot(aes())
# d259 y d259
d259ad259 <- NULL
# d259 y d259
d259ad259 <- NULL
# d259 y d259
d259ad259 <- NULL
ggplot(data = data, aes(x=variable, y=value)) + geom_boxplot(aes())
aa
